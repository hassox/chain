h1. Reuquirements

This is a scratch pad for the requirements (bahaviors) of Chain.  What it should do and why.  Some API examples are also provided to show how.

A "Link" is a piece of the application that can be developed in a focused, reasonably isolated way.

Chaining has proven it's worth in many systems and allows decoupled components to work together through a minimal interface.

By using an event to push the request forward through the chain, callstacks are minimised, and are eliminated between components.  This is important to allow many requests to get a slice of the processor.  Considering that the event loop has no threads, any one request that holds the attention of the event loop for it's entire request means that no other request, or out of request process can use the processor till it's finished.  By forcing components to use events to pass the reqest around it gives up control of the event loop so that many things may be processed in a much more timely manner.  Imagine iterating through a huge array inside a browser.  Although there's no IO wait occuring and CPU utilisation is maximised.  The event loop is also stalled waiting for the calcs to finish.  By spliting things into smaller chunks, we can be more responsive on the server.


Ryah: "With no concurrency, comes great concurrency"

Although the document below describes the things that should be considered when building a chaining approach.  The end result should be very simple for the basic case, and allow the complex.  Examples of how Chain achives this will be given at the end:


h2. Moving Around the Chain

Moving around the chain of links is

* Provide a default path through the chain
** When using a link, it needs a mechanism to join the links together in a default way such that each link can find the next "default" link in the chain.
** The construction of a path through the chain should not be rigidly envorced.  That is, each link should be able to decide what the next link is if any
* Pass a request forward to the next link in the default chain
** Passing a request forward in the chain should be flexible and simple.  An example in chain <pre><code>
env.send(nextApp);</code></pre>
* Pass a request forward to an arbitrary link
** Same as above.  Substitute nextApp for any link that is next in the chain
* Pass a request back one step (Note, it should only ever go one step back)
** A link should be able to register a function it wants to execute if the request comes back through it, and has not yet been completed.  This is the default way chains should work.
** An example of this being useful is if the body of a response is a file and it should be chunked.  There are many other examples of useful "middleware" in rack including ETAG, Caching, authentication etc.
** Not all links want or need to modify the request on the way out.  These links should not see the request on the way out then.
** A callback stack should be maintained such that when a link recieves a request it can add a function to execute if the request comes back.
** An example of declaring such a callback in Chain <pre><code>
env.send(nextApp, functon(){ /* do stuff */ });</code></pre>
** A Link example of passing control of the request back to the last defined callback. <pre><code>
env.done()
* Stop a request without passing it back (complete / websocket / long connection etc)
** Any link should be able to finish a response at any time.  If a link knows what needs to be done, then it should be able to respond and finish the response without passing back to links that are expecting to be able to modify the response before it goes to the client.
** To call the next function on the stack use env.done() in chain

h2. Callbacks

In callstack based setups, each component sees the request on the way in, and on the way out.  Callbacks are a way to see the request "on the way out".  There are a number of different callbacks required to ensure that long open connections can function correctly.

* Add callbacks so this link sees the env on the backwards traversal.
** Can either act to send it to the client, or modify the response.
** These callbacks may not actually run if something downstream finishes the response and does not continue the callback stack.
** EXAMPLE: env.send(nextApp, function(){ /* stuff */ });
** EXAMPLE: env.onDone(function(){ /* stuff */ });
* Add callbacks to modify the headers prior to them being sent
** Need to be able to modify the headers hash.  Links may want to set content-length content-type or other header values
** EXAMPLE: env.beforeHeaders(function(status, headers){ /* stuff */ });
** Return an array of arguments for sendHeaders
* Add callbacks to modify body chunks prior to them being sent
** Individual chunks should be accessible.  eg. gzipping each chunk
** EXAMPLE: env.beforeSendbody(function(chunk, encoding){ /* stuff */ })
** Return an array of arguments for response.sendBody
* Add callbacks to perform actions after a response is finished
** Need to run after the response is finished.  This way the client gets the response asap, and anything later can be run after the response is finished.
** Mail, Logging, Auditing, DB Connection Cleanup etc.
** EXAMPLE: env.onFinish(function(){ /* stuff */ });

h2. Building A Chain

* Join links together to provide a default path through the application
** These may not be used by the links but by giving a default path through the chain, you're setting up the application as you expect it to run in default cases.
** EXAMPLE: Chain.Builder.make([ function(env){ env.send(nextApp) }, anObjectThatHasARequestListenerOnItself])
** EXAMPLE: <pre><code>
var builder = new Chain.Builder();
builder
  .use(function(env){env.done()})
  .use(myInstanceLink)
  .useConstructor(myContstructor, { an : "opts", hash : "to use" })

chain.run(builder.build());
</code></pre>


h1. Some examples of chain applications:

EXAMPLE: Simple chain app
<pre><code>
var chain = require('chain');

var app = chain.Builder.make([function(env){
  env.body = "Hello World!";
  env.done();
}])

chain.run(app);
</code></pre>

You can see that most of this is setting up the chain.  Here's an example of multiple components in a chain.

EXAMPLE: 2 Link chain app
<pre><code>
var chain = require('chain');
function htmlHeader(env){
  env.headers["Content-Type"] = "text/html";
  env.send(nextApp);
}

function endPoint(env){
  env.body = "<div>Hi!</div>";
  env.done();
}

var app = chain.Builder.make([htmlHeader, endPoint]);

chain.run(app);
</pre></code>

EXAMPLE: 3 link chain app with callback
<pre><code>
function authorize(env){
  env.send(nextApp, function(){
    if(env.status == 401){
      env.send(failureApp);
    } else {
      env.done();
    }
  }
}

var app = chain.Builder.make([htmlHeader, authorize, endPoint]);

chain.run(app);
</code></pre>

You can see here that it's easy with chain to either pass it back or take some other action.

The simple cases should be simple!
